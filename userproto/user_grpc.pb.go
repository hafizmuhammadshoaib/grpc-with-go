// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.6.1
// source: userproto/user.proto

package grpc_with_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserProtoClient is the client API for UserProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserProtoClient interface {
	CreateUser(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserCreateReply, error)
	GetUserById(ctx context.Context, in *UserGetRequest, opts ...grpc.CallOption) (*UserGetReply, error)
}

type userProtoClient struct {
	cc grpc.ClientConnInterface
}

func NewUserProtoClient(cc grpc.ClientConnInterface) UserProtoClient {
	return &userProtoClient{cc}
}

func (c *userProtoClient) CreateUser(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserCreateReply, error) {
	out := new(UserCreateReply)
	err := c.cc.Invoke(ctx, "/grpc_with_go.UserProto/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProtoClient) GetUserById(ctx context.Context, in *UserGetRequest, opts ...grpc.CallOption) (*UserGetReply, error) {
	out := new(UserGetReply)
	err := c.cc.Invoke(ctx, "/grpc_with_go.UserProto/GetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserProtoServer is the server API for UserProto service.
// All implementations must embed UnimplementedUserProtoServer
// for forward compatibility
type UserProtoServer interface {
	CreateUser(context.Context, *UserCreateRequest) (*UserCreateReply, error)
	GetUserById(context.Context, *UserGetRequest) (*UserGetReply, error)
	mustEmbedUnimplementedUserProtoServer()
}

// UnimplementedUserProtoServer must be embedded to have forward compatible implementations.
type UnimplementedUserProtoServer struct {
}

func (UnimplementedUserProtoServer) CreateUser(context.Context, *UserCreateRequest) (*UserCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserProtoServer) GetUserById(context.Context, *UserGetRequest) (*UserGetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUserProtoServer) mustEmbedUnimplementedUserProtoServer() {}

// UnsafeUserProtoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserProtoServer will
// result in compilation errors.
type UnsafeUserProtoServer interface {
	mustEmbedUnimplementedUserProtoServer()
}

func RegisterUserProtoServer(s grpc.ServiceRegistrar, srv UserProtoServer) {
	s.RegisterService(&UserProto_ServiceDesc, srv)
}

func _UserProto_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProtoServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_with_go.UserProto/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProtoServer).CreateUser(ctx, req.(*UserCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProto_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProtoServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_with_go.UserProto/GetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProtoServer).GetUserById(ctx, req.(*UserGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserProto_ServiceDesc is the grpc.ServiceDesc for UserProto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserProto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_with_go.UserProto",
	HandlerType: (*UserProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserProto_CreateUser_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _UserProto_GetUserById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userproto/user.proto",
}
